// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pebble.proto

package pebble_wallets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PebbleAPIClient is the client API for PebbleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PebbleAPIClient interface {
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionReply, error)
	SubscribeBlocks(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PebbleAPI_SubscribeBlocksClient, error)
}

type pebbleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPebbleAPIClient(cc grpc.ClientConnInterface) PebbleAPIClient {
	return &pebbleAPIClient{cc}
}

func (c *pebbleAPIClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionReply, error) {
	out := new(TransactionReply)
	err := c.cc.Invoke(ctx, "/api.PebbleAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pebbleAPIClient) SubscribeBlocks(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PebbleAPI_SubscribeBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PebbleAPI_ServiceDesc.Streams[0], "/api.PebbleAPI/SubscribeBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &pebbleAPISubscribeBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PebbleAPI_SubscribeBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type pebbleAPISubscribeBlocksClient struct {
	grpc.ClientStream
}

func (x *pebbleAPISubscribeBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PebbleAPIServer is the server API for PebbleAPI service.
// All implementations must embed UnimplementedPebbleAPIServer
// for forward compatibility
type PebbleAPIServer interface {
	SendTransaction(context.Context, *TransactionRequest) (*TransactionReply, error)
	SubscribeBlocks(*SubscribeRequest, PebbleAPI_SubscribeBlocksServer) error
	mustEmbedUnimplementedPebbleAPIServer()
}

// UnimplementedPebbleAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPebbleAPIServer struct {
}

func (UnimplementedPebbleAPIServer) SendTransaction(context.Context, *TransactionRequest) (*TransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedPebbleAPIServer) SubscribeBlocks(*SubscribeRequest, PebbleAPI_SubscribeBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocks not implemented")
}
func (UnimplementedPebbleAPIServer) mustEmbedUnimplementedPebbleAPIServer() {}

// UnsafePebbleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PebbleAPIServer will
// result in compilation errors.
type UnsafePebbleAPIServer interface {
	mustEmbedUnimplementedPebbleAPIServer()
}

func RegisterPebbleAPIServer(s grpc.ServiceRegistrar, srv PebbleAPIServer) {
	s.RegisterService(&PebbleAPI_ServiceDesc, srv)
}

func _PebbleAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PebbleAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PebbleAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PebbleAPIServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PebbleAPI_SubscribeBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PebbleAPIServer).SubscribeBlocks(m, &pebbleAPISubscribeBlocksServer{stream})
}

type PebbleAPI_SubscribeBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type pebbleAPISubscribeBlocksServer struct {
	grpc.ServerStream
}

func (x *pebbleAPISubscribeBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

// PebbleAPI_ServiceDesc is the grpc.ServiceDesc for PebbleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PebbleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PebbleAPI",
	HandlerType: (*PebbleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _PebbleAPI_SendTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBlocks",
			Handler:       _PebbleAPI_SubscribeBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pebble.proto",
}
